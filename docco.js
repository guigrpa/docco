// Generated by CoffeeScript 1.10.0
(function() {
  var Docco, _, buildMatchers, commander, configure, defaults, diveSync, document, format, fs, getLanguage, highlightjs, languages, marked, parse, path, run, slash, version, write,
    slice = [].slice;

  document = function(options, callback) {
    var config;
    if (options == null) {
      options = {};
    }
    config = configure(options);
    return fs.mkdirs(config.output, function() {
      var complete, copyAsset, files, nextFile;
      callback || (callback = function(error) {
        if (error) {
          throw error;
        }
      });
      copyAsset = function(file, callback) {
        if (!fs.existsSync(file)) {
          return callback();
        }
        return fs.copy(file, path.join(config.output, path.basename(file)), callback);
      };
      complete = function() {
        return copyAsset(config.css, function(error) {
          if (error) {
            return callback(error);
          }
          if (fs.existsSync(config["public"])) {
            return copyAsset(config["public"], callback);
          }
          return callback();
        });
      };
      files = config.sources.slice();
      nextFile = function() {
        var source;
        source = files.shift();
        return fs.readFile(source, function(error, buffer) {
          var code, sections;
          if (error) {
            return callback(error);
          }
          code = buffer.toString();
          sections = parse(source, code, config);
          format(source, sections, config);
          write(source, sections, config);
          if (files.length) {
            return nextFile();
          } else {
            return complete();
          }
        });
      };
      return nextFile();
    });
  };

  parse = function(source, code, config) {
    var codeText, docsText, fMarkdown, hasCode, i, isText, j, k, lang, len, len1, line, lines, match, maybeCode, oldLen, save, sections;
    if (config == null) {
      config = {};
    }
    lines = code.split('\n');
    sections = [];
    lang = getLanguage(source, config);
    hasCode = docsText = codeText = '';
    save = function() {
      sections.push({
        docsText: docsText,
        codeText: codeText
      });
      return hasCode = docsText = codeText = '';
    };
    if (lang.literate) {
      isText = maybeCode = true;
      for (i = j = 0, len = lines.length; j < len; i = ++j) {
        line = lines[i];
        lines[i] = maybeCode && (match = /^([ ]{4}|[ ]{0,3}\t)/.exec(line)) ? (isText = false, line.slice(match[0].length)) : (maybeCode = /^\s*$/.test(line)) ? isText ? lang.symbol : '' : (isText = true, lang.symbol + ' ' + line);
      }
    }
    fMarkdown = lang.name === 'markdown';
    for (k = 0, len1 = lines.length; k < len1; k++) {
      line = lines[k];
      if (line.match(lang.discardLineFilter)) {
        continue;
      }
      if (fMarkdown || (line.match(lang.commentMatcher) && !line.match(lang.commentFilter))) {
        if (hasCode || (fMarkdown && line.match(/^s*(#+) /))) {
          save();
        }
        if (!fMarkdown) {
          line = line.replace(lang.commentMatcher, '');
        }
        docsText += line + '\n';
        if (/^(---+|===+)$/.test(line)) {
          save();
        }
      } else {
        hasCode = true;
        if (config.indent) {
          oldLen = 0;
          while (oldLen !== line.length) {
            oldLen = line.length;
            line = line.replace(/^(\x20*)\t/, '$1' + config.indent);
          }
        }
        codeText += line + '\n';
      }
    }
    save();
    return sections;
  };

  format = function(source, sections, config) {
    var code, firstComment, i, j, language, len, markedOptions, results, section;
    language = getLanguage(source, config);
    markedOptions = {
      smartypants: true
    };
    if (config.marked) {
      markedOptions = config.marked;
    }
    marked.setOptions(markedOptions);
    marked.setOptions({
      highlight: function(code, lang) {
        lang || (lang = language.name);
        if (highlightjs.getLanguage(lang)) {
          return highlightjs.highlight(lang, code).value;
        } else {
          console.warn("docco: couldn't highlight code block with unknown language '" + lang + "' in " + source);
          return code;
        }
      }
    });
    results = [];
    for (i = j = 0, len = sections.length; j < len; i = ++j) {
      section = sections[i];
      code = highlightjs.highlight(language.name, section.codeText).value;
      code = code.replace(/\s+$/, '');
      section.codeHtml = "<div class='highlight'><pre>" + code + "</pre></div>";
      section.docsHtml = marked(section.docsText);
      firstComment = marked.lexer(section.docsText)[0];
      if ((firstComment != null ? firstComment.type : void 0) === 'heading') {
        section.heading = firstComment.text;
        results.push(section.headingDepth = firstComment.depth);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  write = function(source, sections, config) {
    var assetPath, destination, destinationDir, destinationFile, first, firstSection, hasTitle, html, htmlPath, lang, title;
    destination = function(file, options) {
      var filename, ref;
      if (options == null) {
        options = {};
      }
      if ((ref = options.fKeepExtension) != null ? ref : false) {
        filename = path.basename(file);
      } else {
        filename = path.basename(file, path.extname(file)) + '.html';
      }
      return path.join(config.output, path.dirname(file), filename);
    };
    htmlPath = function(file, options) {
      var goIn, goOut;
      if (options == null) {
        options = {};
      }
      goOut = path.relative(path.dirname(destination(source)), config.output);
      goIn = path.relative(config.output, destination(file, options));
      return slash(path.join(goOut, goIn));
    };
    assetPath = function(file) {
      return htmlPath(file, {
        fKeepExtension: true
      });
    };
    firstSection = _.find(sections, function(section) {
      return section.docsText.length > 0;
    });
    if (firstSection) {
      first = marked.lexer(firstSection.docsText)[0];
    }
    hasTitle = first && first.type === 'heading' && first.depth === 1;
    title = hasTitle ? first.text : path.basename(source);
    destinationFile = destination(source);
    destinationDir = path.dirname(destinationFile);
    lang = getLanguage(source, config);
    html = config.template({
      sources: config.sources,
      css: path.join(path.relative(destinationDir, config.output), path.basename(config.css)),
      destination: htmlPath,
      htmlPath: htmlPath,
      assetPath: assetPath,
      path: path,
      title: title,
      hasTitle: hasTitle,
      sections: sections,
      lang: lang.name
    });
    console.log("docco: " + source + " -> " + (destination(source)));
    fs.mkdirsSync(destinationDir);
    return fs.writeFileSync(destinationFile, html);
  };

  defaults = {
    layout: 'parallel',
    output: 'docs',
    template: null,
    css: null,
    extension: null,
    languages: {},
    marked: null,
    tabSize: null,
    indent: null
  };

  configure = function(options) {
    var allSources, config, dir, fileOrDir, j, len, ref, stats;
    config = _.extend({}, defaults, _.pick.apply(_, [options].concat(slice.call(_.keys(defaults)))));
    config.languages = buildMatchers(config.languages);
    if (config.tabSize) {
      config.indent = Array(parseInt(config.tabSize) + 1).join(' ');
    }
    if (options.template) {
      if (!options.css) {
        console.warn("docco: no stylesheet file specified");
      }
      config.layout = null;
    } else {
      dir = config.layout = path.join(__dirname, 'resources', config.layout);
      if (fs.existsSync(path.join(dir, 'public'))) {
        config["public"] = path.join(dir, 'public');
      }
      config.template = path.join(dir, 'docco.jst');
      config.css = options.css || path.join(dir, 'docco.css');
    }
    config.template = _.template(fs.readFileSync(config.template).toString());
    if (options.marked) {
      config.marked = JSON.parse(fs.readFileSync(options.marked));
    }
    allSources = [];
    ref = options.args;
    for (j = 0, len = ref.length; j < len; j++) {
      fileOrDir = ref[j];
      console.log(fileOrDir);
      stats = fs.lstatSync(fileOrDir);
      if (stats.isDirectory()) {
        diveSync(fileOrDir, function(err, file) {
          if (!err) {
            return allSources.push(file);
          }
        });
      } else if (stats.isFile()) {
        allSources.push(fileOrDir);
      }
    }
    config.sources = allSources.filter(function(source) {
      var lang;
      lang = getLanguage(source, config);
      if (!lang) {
        console.warn("docco: skipped unknown type (" + source + ")");
      }
      return lang;
    }).sort();
    return config;
  };

  _ = require('underscore');

  fs = require('fs-extra');

  path = require('path');

  marked = require('marked');

  commander = require('commander');

  highlightjs = require('highlight.js');

  diveSync = require('diveSync');

  slash = require('slash');

  languages = JSON.parse(fs.readFileSync(path.join(__dirname, 'resources', 'languages.json')));

  buildMatchers = function(languages) {
    var ext, l;
    for (ext in languages) {
      l = languages[ext];
      l.commentMatcher = RegExp("^\\s*" + l.symbol + "\\s?");
      if (l.name === 'coffeescript') {
        l.commentFilter = /(^#![\/]|^\s*#\{|^\s*## )/;
      } else {
        l.commentFilter = /(^#![\/]|^\s*#\{)/;
      }
      l.discardLineFilter = /^\s*#-/;
    }
    return languages;
  };

  languages = buildMatchers(languages);

  getLanguage = function(source, config) {
    var codeExt, codeLang, ext, lang, ref;
    ext = config.extension || path.extname(source) || path.basename(source);
    lang = ((ref = config.languages) != null ? ref[ext] : void 0) || languages[ext];
    if (lang && lang.name === 'markdown') {
      codeExt = path.extname(path.basename(source, ext));
      if (codeExt && (codeLang = languages[codeExt])) {
        lang = _.extend({}, codeLang, {
          literate: true
        });
      }
    }
    return lang;
  };

  version = JSON.parse(fs.readFileSync(path.join(__dirname, 'package.json'))).version;

  run = function(args) {
    var c;
    if (args == null) {
      args = process.argv;
    }
    c = defaults;
    commander.version(version).usage('[options] directories').option('-L, --languages [file]', 'use a custom languages.json', _.compose(JSON.parse, fs.readFileSync)).option('-l, --layout [name]', 'choose a layout (parallel, linear or classic)', c.layout).option('-o, --output [path]', 'output to a given folder', c.output).option('-c, --css [file]', 'use a custom css file', c.css).option('-t, --template [file]', 'use a custom .jst template', c.template).option('-e, --extension [ext]', 'assume a file extension for all inputs', c.extension).option('-m, --marked [file]', 'use custom marked options', c.marked).option('--tab-size [size]', 'convert leading tabs to X spaces').parse(args).name = "docco";
    if (commander.args.length) {
      return document(commander);
    } else {
      return console.log(commander.helpInformation());
    }
  };

  Docco = module.exports = {
    run: run,
    document: document,
    parse: parse,
    format: format,
    version: version
  };

}).call(this);
